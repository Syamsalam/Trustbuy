generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id            Int        @id @default(autoincrement())
  category_name String     @db.VarChar(100)
  products      products[]
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  quantity   Int?
  subtotal   Decimal?  @db.Decimal(10, 2)
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "order_items_ibfk_1")
  products   products? @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "order_items_ibfk_2")

  @@index([order_id], map: "order_id")
  @@index([product_id], map: "product_id")
}

model orders {
  id                Int              @id @default(autoincrement())
  user_id           Int?
  order_date        DateTime?        @db.Date
  status_id         Int?
  shipping_address  String?          @db.Text
  payment_method_id Int?
  history           history[]
  order_items       order_items[]
  users             users?           @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "orders_ibfk_1")
  payment_methods   payment_methods? @relation(fields: [payment_method_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "orders_ibfk_2")
  status            status?          @relation(fields: [status_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "orders_ibfk_3")
  payment           payment[]

  @@index([payment_method_id], map: "payment_method_id")
  @@index([user_id], map: "user_id")
  @@index([status_id], map: "status_id")
}

model payment {
  id               Int       @id @default(autoincrement())
  order_id         Int?
  payment_date     DateTime? @db.Date
  amount           Decimal?  @db.Decimal(10, 2)
  biaya_ongkir     Decimal?  @db.Decimal(10, 2)
  biaya_app        Decimal?  @db.Decimal(10, 2)
  biaya_jastip     Decimal?  @db.Decimal(10, 2)
  total_pembayaran Decimal?  @db.Decimal(10, 2)
  history          history[]
  orders           orders?   @relation(fields: [order_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "payment_ibfk_1")

  @@index([order_id], map: "order_id")
}

model payment_methods {
  id      Int      @id @default(autoincrement())
  payment String   @db.VarChar(50)
  orders  orders[]
}

model products {
  id           Int           @id @default(autoincrement())
  product_name String        @db.VarChar(100)
  description  String?       @db.Text
  price        Decimal       @db.Decimal(10, 2)
  stock        Int?
  category_id  Int?
  order_items  order_items[]
  category     category?     @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "products_ibfk_1")

  @@index([category_id], map: "category_id")
}

model role {
  id        Int     @id @default(autoincrement())
  role_name String  @db.VarChar(50)
  users     users[]
}

model status {
  id          Int      @id @default(autoincrement())
  status_name String   @db.VarChar(50)
  orders      orders[]
}

model user_details {
  id                Int     @id @default(autoincrement())
  nama              String  @db.VarChar(255)
  alamat            String  @db.VarChar(255)
  nomor_telepon     String  @db.VarChar(20)
  data_identifikasi String? @db.VarChar(255)
  users             users?
}

model users {
  id                               Int             @id @default(autoincrement())
  username                         String          @unique @db.VarChar(50)
  password                         String          @db.VarChar(255)
  email                            String          @db.VarChar(100)
  role_id                          Int
  user_details_id                  Int             @unique
  history                          history[]
  history_history_id_jastipTousers history[]       @relation("history_id_jastipTousers")
  image                            image?
  jastiper_post                    jastiper_post[]
  orders                           orders[]
  role                             role            @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "users_ibfk_1")
  user_details                     user_details    @relation(fields: [user_details_id], references: [id], onUpdate: Restrict, map: "users_ibfk_2")

  @@index([role_id], map: "users_ibfk_1")
}

model history {
  id                             Int       @id @default(autoincrement())
  id_user                        Int?
  id_jastip                      Int?
  orders_id                      Int?
  payment_id                     Int?
  history_time                   DateTime? @db.DateTime(0)
  users                          users?    @relation(fields: [id_user], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "history_ibfk_1")
  orders                         orders?   @relation(fields: [orders_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "history_ibfk_2")
  payment                        payment?  @relation(fields: [payment_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "history_ibfk_3")
  users_history_id_jastipTousers users?    @relation("history_id_jastipTousers", fields: [id_jastip], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "history_ibfk_4")

  @@index([id_user], map: "id_user")
  @@index([orders_id], map: "orders_id")
  @@index([payment_id], map: "payment_id")
  @@index([id_jastip], map: "id_jastip")
}

model jastiper_post {
  id          Int                  @id @default(autoincrement())
  user_id     Int?
  judul       String               @unique(map: "judul") @db.VarChar(255)
  deskripsi   String?              @db.Text
  lokasi      String?              @db.Text
  waktu_mulai DateTime?            @db.Time(0)
  waktu_akhir DateTime?            @db.Time(0)
  aktif       jastiper_post_aktif?
  users       users?               @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "jastiper_post_ibfk_1")

  @@index([user_id], map: "user_id")
}

model image {
  id             Int     @id @default(autoincrement())
  jenis_image_id Int
  users_id       Int?    @unique(map: "users_id")
  image          String? @db.LongText
  users          users?  @relation(fields: [users_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "image_ibfk_1")
}

model jenis_image {
  id          Int     @id
  jenis_image String? @db.VarChar(255)
}

enum jastiper_post_aktif {
  aktif
  non_aktif
}
